---
description: 
globs: 
alwaysApply: true
---
# ZMFv2 Development Rules

**Project**: Headphone manufacturing company backend  
**Stack**: Next.js 14+ + Supabase + TypeScript + Employee management

## üìã Tech Stack Details
- **Frontend**: Next.js 15.3.2, React 18.2.0, TypeScript 5
- **UI**: Tailwind CSS v4, shadcn/ui, Radix UI
- **Backend**: Supabase (PostgreSQL, Auth, Realtime)
- **Forms**: React Hook Form + Zod validation
- **Data Viz**: Recharts, TanStack Table
- **PDF**: jsPDF, PDFKit
- **External**: Shopify Admin API

## üìÅ Project Structure
```
specs/                 # Project specifications
src/lib/supabase/     # Auth utilities
src/app/api/          # API routes
src/components/       # UI components
src/app/worker/       # Worker dashboard
src/app/admin/        # Admin tools
supabase/             # Database schema
src/hooks/            # Custom React hooks
src/types/            # TypeScript type definitions
src/features/         # Feature modules
```

## üîê Authentication (Critical)
- **ALWAYS** use `@supabase/ssr` (never `@supabase/auth-helpers-nextjs`)
- **Server components**: Use `createClient()` from `@/lib/supabase/server`
- **Client components**: Use `createClient()` from `@/lib/supabase/client`
- **Server-side**: Always use `getUser()`, never `getSession()`
- **Validation chain**: auth ‚Üí employee status ‚Üí role permissions
- **RLS**: All tables must have Row Level Security enabled

## üèóÔ∏è Component Patterns

### Server Components (Default)
```typescript
import { createClient } from '@/lib/supabase/server'
import { redirect } from 'next/navigation'

export default async function Component() {
  const supabase = await createClient()
  const { data: { user } } = await supabase.auth.getUser()
  
  if (!user) redirect('/login')
  
  // Validate employee status
  const { data: employee } = await supabase
    .from('employees')
    .select('role, active')
    .eq('auth_user_id', user.id)
    .single()
    
  if (!employee?.active) redirect('/login')
  
  return <div>Content</div>
}
```

### API Routes
```typescript
import { createClient } from '@/lib/supabase/server'
import { NextRequest, NextResponse } from 'next/server'

export async function GET(request: NextRequest) {
  try {
    const supabase = await createClient()
    const { data: { user }, error } = await supabase.auth.getUser()
    
    if (error || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }
    
    // Always validate employee
    const { data: employee } = await supabase
      .from('employees')
      .select('role, active')
      .eq('auth_user_id', user.id)
      .single()
    
    if (!employee?.active) {
      return NextResponse.json({ error: 'Forbidden' }, { status: 403 })
    }
    
    // Business logic here
    return NextResponse.json({ data: result })
  } catch (error) {
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}
```

### Form Handling with React Hook Form + Zod
```typescript
// Define schema
const workOrderSchema = z.object({
  modelId: z.string().uuid(),
  quantity: z.number().min(1).max(1000),
  priority: z.enum(['low', 'medium', 'high', 'urgent']),
  dueDate: z.date().min(new Date()),
  notes: z.string().max(500).optional()
})

// Use in component
const form = useForm<WorkOrderForm>({
  resolver: zodResolver(workOrderSchema),
  defaultValues: {
    priority: 'medium',
    quantity: 1
  }
})
```

### React Performance Patterns
```typescript
// Memoize expensive calculations
const processedData = useMemo(() => 
  expensiveCalculation(rawData), [rawData]
)

// Stable function references for child components
const handleUpdate = useCallback((id: string) => {
  updateItem(id)
}, [updateItem])

// Lazy load heavy components
const HeavyChart = dynamic(() => import('@/components/charts/HeavyChart'), {
  loading: () => <ChartSkeleton />
})
```

## üìä Data Access Patterns

### Build Management
- Scope builds by `assigned_to` matching current employee
- Always join with `headphone_models` for build UI
- Use `model_id`, `builder_id`, `assigned_to` for relationships

### Task Management  
- Filter tasks via `production_tasks.assigned_to_id`
- Always scope by build and status
- Use consistent status enums (`build_stage`)

### QC Handling
- QC steps defined per model in `qc_steps` table
- Store results with consistent schema: `{ looks, hardware, sound, notes }`
- Use templates for new models, not one-off inserts

### Type-Safe Queries
```typescript
// Generate types from Supabase
// npx supabase gen types typescript --project-id "$PROJECT_ID" > types/database.types.ts

import { Database } from '@/types/database.types'

type Build = Database['public']['Tables']['builds']['Row']
type Employee = Database['public']['Tables']['employees']['Row']

// Use in queries
const { data, error } = await supabase
  .from('builds')
  .select(`
    *,
    headphone_model:headphone_models(name, model_code),
    assigned_to:employees(name, employee_id)
  `)
  .returns<BuildWithRelations[]>()
```

## üõ°Ô∏è Security Requirements
- **Input validation**: Use Zod schemas for all API inputs
- **Error handling**: Consistent error structures `{ error: string }`
- **Data scoping**: All queries respect user permissions via `auth_user_id`
- **No client-side secrets**: Environment variables server-side only
- **CSRF protection**: Built into Next.js, don't disable
- **Rate limiting**: Implement on sensitive endpoints
- **XSS prevention**: React handles by default, be careful with dangerouslySetInnerHTML

## üé® Design Rules
- **Modals**: Keep the dialogs to be contextual with position near the cursor and don't be intrusive with background
- **Buttons**: When creating buttons make sure to give them some color. The colors should be soft friendly
- **Components**: Use shadcn/ui patterns - install via `npx shadcn@latest add [component]`
- **Styling**: Tailwind utilities first, cn() for conditional classes
- **Dark mode**: Support via CSS variables
- **Accessibility**: Semantic HTML, ARIA labels, keyboard navigation
- **Icons**: Import individually from lucide-react for tree-shaking:
  ```typescript
  // Good - only imports what you need
  import { Camera, Settings } from 'lucide-react'
  
  // Bad - imports entire library
  import * as Icons from 'lucide-react'
  ```

## üîÑ Database Rules
- **Schema**: Treat `supabase/schema.sql` as source of truth
- **Migrations**: Use Supabase CLI, don't manually edit migration files
- **Realtime**: Enable on key tables (`builds`, `production_tasks`)
- **Triggers**: Document all triggers and enums in code comments
- **RLS Policies**: Test in Supabase dashboard before deployment
- **Indexes**: Add for frequently queried columns

## üè™ External Integrations
- **Shopify**: Route through Supabase Edge Functions only
- **Never trust client data** for order/build sync
- **API validation**: All external data must be validated server-side
- **Error handling**: Graceful degradation if external services fail
- **Retry logic**: Implement exponential backoff
- **PDF Generation**: 
  - Prefer server-side generation for complex documents
  - Client-side only for simple, user-triggered exports
  - Validate and sanitize all inputs to PDFs

## üíª Development Standards
- **TypeScript**: Strict mode enabled
- **Server-first**: Use Server Components by default
- **Error boundaries**: Comprehensive error handling
- **Performance**: Check specs before building features
- **Testing**: Test auth flows and permissions thoroughly
- **Naming conventions**:
  - Components: PascalCase
  - Utilities: camelCase
  - Types: PascalCase
  - Constants: UPPER_SNAKE_CASE

## üöÄ Performance Guidelines
- **Images**: Always use next/image with proper sizing
- **Code splitting**: Dynamic imports for heavy components
- **Caching**: Use Next.js caching options appropriately
- **Bundle size**: Monitor with @next/bundle-analyzer
- **Core Web Vitals**: LCP < 1.2s, FID < 50ms, CLS < 0.05

## üß™ Testing Strategy
- **Unit tests**: Utilities and pure functions
- **Integration tests**: API routes and database operations
- **E2E critical paths**:
  - User authentication flow
  - Build creation and assignment
  - QC completion workflow
  - Report generation

## üìù Quick Commands
```bash
# Development
npm run dev -- --turbo        # Start with Turbopack
npx shadcn@latest add        # Add UI components

# Database
npx supabase gen types typescript  # Generate types
npx supabase db push              # Push migrations
npx supabase db reset             # Reset database

# Quality
npm run type-check           # TypeScript validation
npm run lint                # ESLint check
npm run test               # Run test suite
```

## üö´ Forbidden Patterns
- Using `@supabase/auth-helpers-nextjs`
- Using `getSession()` on server-side
- Using `useSession()` for access control
- Trusting client-side data for sensitive operations
- Manual migration file editing
- Hardcoding user IDs or skipping employee validation
- Using `any` type in TypeScript
- Inline styles instead of Tailwind classes
- Direct database access from client components
- Storing sensitive data in localStorage
- Importing entire icon libraries

<!-- Upgrade targets for planning:
- React 19 when stable (currently 18.2.0)
- Zod v4 when ready (breaking changes)
- Monitor Next.js 15.x minor updates
-->